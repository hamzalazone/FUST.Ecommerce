@page "/users/update/{UserId}"

@using Fust.Ecommerce.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManage
@inject NavigationManager Navigation

<h3>Update User</h3>

@if (User != null)
{
    <EditForm Model="User" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="userName" class="form-label">User Name:</label>
            <InputText id="userName" class="form-control" @bind-Value="User.UserName" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="User.Email" />
        </div>
        <div class="mb-3">
            <label for="phoneNumber" class="form-label">Phone Number:</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="User.PhoneNumber" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>

    @if (SuccessMessage != null)
    {
        <div class="alert alert-success mt-3">@SuccessMessage</div>
    }

    @if (ErrorMessage != null)
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    public ApplicationUser? User { get; set; }
    public string? ErrorMessage { get; set; }
    public string? SuccessMessage { get; set; }

    [Parameter]
    public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await UserManage.FindByIdAsync(UserId);
    }

    private async Task HandleValidSubmit()
    {
        var result = await UserManage.UpdateAsync(User);
        if (result.Succeeded)
        {
            SuccessMessage = "User updated successfully!";
            
            //Navigation.NavigateTo("/users");
        }
        else
        {
            ErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }
}